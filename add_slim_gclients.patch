From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jesse Ezell <jezell@users.noreply.github.com>
Date: Sun, 27 Mar 2025 14:49:01 -0800
Subject: Add engine build ci infra

diff --git a/engine/scripts/slim-linux-android.gclient b/engine/scripts/slim-linux-android.gclient
new file mode 100644
index 0000000000..ef6c08d028
--- /dev/null
+++ b/engine/scripts/slim-linux-android.gclient
@@ -0,0 +1,23 @@
+# Copy this file to the root of your flutter checkout to bootstrap gclient
+# or just run gclient sync in an empty directory with this file.
+solutions = [
+  {
+    "custom_deps": {},
+    "deps_file": "DEPS",
+    "managed": False,
+    "name": ".",
+    "safesync_url": "",
+
+    # If you are using SSH to connect to GitHub, change the URL to:
+    # git@github.com:flutter/flutter.git
+    "url": "https://github.com/flutter/flutter.git",
+
+
+    "custom_vars": {
+        "download_linux_deps": False,
+        "download_android_deps": True,
+        "download_esbuild": False,
+        "download_fuchsia_deps": False,
+    }
+  },
+]
\ No newline at end of file
diff --git a/engine/scripts/slim-linux-desktop.gclient b/engine/scripts/slim-linux-desktop.gclient
new file mode 100644
index 0000000000..b7d27e26fb
--- /dev/null
+++ b/engine/scripts/slim-linux-desktop.gclient
@@ -0,0 +1,23 @@
+# Copy this file to the root of your flutter checkout to bootstrap gclient
+# or just run gclient sync in an empty directory with this file.
+solutions = [
+  {
+    "custom_deps": {},
+    "deps_file": "DEPS",
+    "managed": False,
+    "name": ".",
+    "safesync_url": "",
+
+    # If you are using SSH to connect to GitHub, change the URL to:
+    # git@github.com:flutter/flutter.git
+    "url": "https://github.com/flutter/flutter.git",
+
+
+    "custom_vars": {
+        "download_linux_deps": True,
+        "download_android_deps": False,
+        "download_esbuild": False,
+        "download_fuchsia_deps": False,
+    }
+  },
+]
\ No newline at end of file
diff --git a/engine/scripts/slim-linux-web.gclient b/engine/scripts/slim-linux-web.gclient
new file mode 100644
index 0000000000..84524ab817
--- /dev/null
+++ b/engine/scripts/slim-linux-web.gclient
@@ -0,0 +1,24 @@
+# Copy this file to the root of your flutter checkout to bootstrap gclient
+# or just run gclient sync in an empty directory with this file.
+solutions = [
+  {
+    "custom_deps": {},
+    "deps_file": "DEPS",
+    "managed": False,
+    "name": ".",
+    "safesync_url": "",
+
+    # If you are using SSH to connect to GitHub, change the URL to:
+    # git@github.com:flutter/flutter.git
+    "url": "https://github.com/flutter/flutter.git",
+
+
+    "custom_vars": {
+        "download_linux_deps": True,
+        "download_android_deps": False,
+        "download_esbuild": True,
+        "download_fuchsia_deps": False,
+        "download_emsdk": True,
+    }
+  },
+]
\ No newline at end of file
diff --git a/engine/scripts/slim-mac.gclient b/engine/scripts/slim-mac.gclient
new file mode 100644
index 0000000000..38be3fde02
--- /dev/null
+++ b/engine/scripts/slim-mac.gclient
@@ -0,0 +1,23 @@
+# Copy this file to the root of your flutter checkout to bootstrap gclient
+# or just run gclient sync in an empty directory with this file.
+solutions = [
+  {
+    "custom_deps": {},
+    "deps_file": "DEPS",
+    "managed": False,
+    "name": ".",
+    "safesync_url": "",
+
+    # If you are using SSH to connect to GitHub, change the URL to:
+    # git@github.com:flutter/flutter.git
+    "url": "https://github.com/flutter/flutter.git",
+
+
+    "custom_vars": {
+        "download_linux_deps": False,
+        "download_android_deps": False,
+        "download_esbuild": False,
+        "download_fuchsia_deps": False,
+    }
+  },
+]
\ No newline at end of file
diff --git a/engine/scripts/slim-windows.gclient b/engine/scripts/slim-windows.gclient
new file mode 100644
index 0000000000..581802c425
--- /dev/null
+++ b/engine/scripts/slim-windows.gclient
@@ -0,0 +1,22 @@
+# Copy this file to the root of your flutter checkout to bootstrap gclient
+# or just run gclient sync in an empty directory with this file.
+solutions = [
+  {
+    "custom_deps": {},
+    "deps_file": "DEPS",
+    "managed": False,
+    "name": ".",
+    "safesync_url": "",
+
+    # If you are using SSH to connect to GitHub, change the URL to:
+    # git@github.com:flutter/flutter.git
+    "url": "https://github.com/flutter/flutter.git",
+
+
+    "custom_vars": {
+        "download_android_deps": False,
+        "download_esbuild": False,
+        "download_fuchsia_deps": False,
+    }
+  },
+]
\ No newline at end of file
diff --git a/engine/src/flutter/tools/engine_tool/lib/src/build_plan.dart b/engine/src/flutter/tools/engine_tool/lib/src/build_plan.dart
index 90dcb4eb99..4e45d46aae 100644
--- a/engine/src/flutter/tools/engine_tool/lib/src/build_plan.dart
+++ b/engine/src/flutter/tools/engine_tool/lib/src/build_plan.dart
@@ -16,6 +16,7 @@ const _flagConfig = 'config';
 const _flagConcurrency = 'concurrency';
 const _flagStrategy = 'build-strategy';
 const _flagRbe = 'rbe';
+const _flagRunTests = 'run-tests';
 const _flagLto = 'lto';
 const _flagExtraGnArgs = 'gn-args';
 
@@ -50,6 +51,7 @@ final class BuildPlan {
     return BuildPlan._(
       build: build,
       strategy: BuildStrategy.values.byName(args.option(_flagStrategy)!),
+      runTests: args.flag(_flagRunTests),
       useRbe: () {
         final useRbe = args.flag(_flagRbe);
         if (useRbe && !environment.hasRbeConfigInTree()) {
@@ -84,6 +86,7 @@ final class BuildPlan {
   BuildPlan._({
     required this.build,
     required this.strategy,
+    required this.runTests,
     required this.useRbe,
     required this.useLto,
     required this.concurrency,
@@ -202,6 +205,19 @@ final class BuildPlan {
       hide: !environment.verbose,
     );
 
+    // Add --run-tests.
+    parser.addFlag(
+      _flagRunTests,
+      defaultsTo: false,
+      help: () {
+        var runTestsHelp = 'Run tests (tests will not run by default).';
+        if (environment.verbose) {
+          runTestsHelp += '\n\n$runTestsHelp';
+        }
+        return runTestsHelp;
+      }(),
+    );
+
     // Add --rbe.
     final hasRbeConfigInTree = environment.hasRbeConfigInTree();
     parser.addFlag(
@@ -245,6 +261,9 @@ final class BuildPlan {
     return builds;
   }
 
+  /// Whether to run tests
+  final bool runTests;
+
   /// The build configuration to use.
   final Build build;
 
diff --git a/engine/src/flutter/tools/engine_tool/lib/src/build_utils.dart b/engine/src/flutter/tools/engine_tool/lib/src/build_utils.dart
index f58160fcbe..3948c42b58 100644
--- a/engine/src/flutter/tools/engine_tool/lib/src/build_utils.dart
+++ b/engine/src/flutter/tools/engine_tool/lib/src/build_utils.dart
@@ -80,6 +80,7 @@ Future<int> runBuild(
   Environment environment,
   Build build, {
   required bool enableRbe,
+  bool runTests = false,
   List<String> extraGnArgs = const <String>[],
   List<Label> targets = const <Label>[],
   int concurrency = 0,
@@ -97,7 +98,7 @@ Future<int> runBuild(
     rbeConfig: rbeConfig,
     concurrency: concurrency,
     extraGnArgs: gnArgs,
-    runTests: false,
+    runTests: runTests,
     extraNinjaArgs: <String>[
       ...targets.map((Label label) => label.toNinjaLabel()),
       // If the environment is verbose, pass the verbose flag to ninja.
diff --git a/engine/src/flutter/tools/engine_tool/lib/src/commands/build_command.dart b/engine/src/flutter/tools/engine_tool/lib/src/commands/build_command.dart
index ac8df2658c..39578291c5 100644
--- a/engine/src/flutter/tools/engine_tool/lib/src/commands/build_command.dart
+++ b/engine/src/flutter/tools/engine_tool/lib/src/commands/build_command.dart
@@ -76,6 +76,7 @@ et build //flutter/fml:fml_benchmarks  # Build a specific target in `//flutter/f
       concurrency: plan.concurrency ?? 0,
       extraGnArgs: plan.toGnArgs(),
       targets: allTargets.toList(),
+      runTests: plan.runTests,
       enableRbe: plan.useRbe,
       rbeConfig: plan.toRbeConfig(),
     );
diff --git a/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config.dart b/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config.dart
index 791c718938..9625b66623 100644
--- a/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config.dart
+++ b/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config.dart
@@ -223,7 +223,6 @@ final class Build extends BuildConfigBase {
     }
 
     if (name == null ||
-        description == null ||
         gn == null ||
         ninja == null ||
         archives == null ||
@@ -235,7 +234,7 @@ final class Build extends BuildConfigBase {
     }
     return Build._(
       name,
-      description,
+      description ?? "",
       gn,
       ninja,
       tests,
@@ -373,14 +372,10 @@ final class BuildTest extends BuildConfigBase {
     final String? script = stringOfJson(map, 'script', errors);
     final List<String>? parameters = stringListOfJson(map, 'parameters', errors);
     final List<String>? contexts = stringListOfJson(map, 'contexts', errors);
-    if (name == null ||
-        language == null ||
-        script == null ||
-        parameters == null ||
-        contexts == null) {
+    if (name == null || script == null || parameters == null || contexts == null) {
       return BuildTest._invalid(errors);
     }
-    return BuildTest._(name, language, script, parameters, contexts);
+    return BuildTest._(name, language ?? "", script, parameters, contexts);
   }
 
   BuildTest._(this.name, this.language, this.script, this.parameters, this.contexts) : super(null);
@@ -435,10 +430,10 @@ final class BuildTask extends BuildConfigBase {
     final String? language = stringOfJson(map, 'language', errors);
     final List<String>? scripts = stringListOfJson(map, 'scripts', errors);
     final List<String>? parameters = stringListOfJson(map, 'parameters', errors);
-    if (name == null || language == null || scripts == null || parameters == null) {
+    if (name == null || scripts == null || parameters == null) {
       return BuildTask._invalid(errors);
     }
-    return BuildTask._(name, language, scripts, parameters);
+    return BuildTask._(name, language ?? "", scripts, parameters);
   }
 
   BuildTask._invalid(super.errors)
@@ -788,7 +783,7 @@ List<String>? stringListOfJson(Map<String, Object?> map, String field, List<Stri
 
 String? stringOfJson(Map<String, Object?> map, String field, List<String> errors) {
   if (map[field] == null) {
-    return '<undef>';
+    return null;
   }
   if (map[field]! is! String) {
     appendTypeError(map, field, 'string', errors);
diff --git a/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config_runner.dart b/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config_runner.dart
index b021fa115d..def61d639c 100644
--- a/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config_runner.dart
+++ b/engine/src/flutter/tools/pkg/engine_build_configs/lib/src/build_config_runner.dart
@@ -575,6 +575,9 @@ final class BuildRunner extends Runner {
   }
 
   Future<bool> _runNinja(RunnerEventHandler eventHandler) async {
+    if (build.ninja.config.isEmpty) {
+      return true;
+    }
     if (_isRbe) {
       if (!await _bootstrapRbe(eventHandler)) {
         return false;
@@ -807,7 +810,7 @@ final class BuildTestRunner extends Runner {
 
   @override
   Future<bool> run(RunnerEventHandler eventHandler) async {
-    final String interpreter = _interpreter(test.language);
+    final String interpreter = test.language != null ? _interpreter(test.language!) : "";
     final List<String> command = <String>[
       if (interpreter.isNotEmpty) interpreter,
       test.script,
